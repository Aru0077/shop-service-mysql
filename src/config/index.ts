// src/config/index.ts
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';
import { createClient } from 'redis';

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
dotenv.config();

// ÂàõÂª∫ Prisma ÂÆ¢Êà∑Á´Ø
const prisma = new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
    datasources: {
        db: {
            url: process.env.DATABASE_URL,
        }
    },
});

// ÂàõÂª∫ Redis ÂÆ¢Êà∑Á´ØÔºåÊ∑ªÂä†Êõ¥Â§öÁöÑËøûÊé•ÈÖçÁΩÆ
const redisClient = createClient({
    url: `redis://${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`,
    password: process.env.REDIS_PASSWORD,
    socket: {
        connectTimeout: 10000,
        keepAlive: 5000,
        reconnectStrategy(retries) {
            // ËøôÊòØÊñ∞Áâà Redis ÂÆ¢Êà∑Á´Ø‰∏≠Á±ª‰ººÂäüËÉΩÁöÑÈÖçÁΩÆÊñπÂºè
            if (retries > 3) {
              return new Error('Max retries reached');
            }
            return Math.min(retries * 100, 3000);
          }
    },
    // Ê∑ªÂä†ËøûÊé•Ê±†ÈôêÂà∂
    commandsQueueMaxLength: 50000, // ÈôêÂà∂ÂëΩ‰ª§ÈòüÂàóÈïøÂ∫¶ 
});

// Ê∑ªÂä†ËøûÊé•Êñ≠ÂºÄÂíåÈáçËøûÁõëÂê¨
redisClient.on('error', (error) => {
    console.error('Redis ËøûÊé•ÈîôËØØ:', error);
});

redisClient.on('reconnecting', () => {
    console.log('Redis Ê≠£Âú®ÈáçÊñ∞ËøûÊé•...');
});

// Redis ËøûÊé•Â§ÑÁêÜ
redisClient.connect()
    .then(() => console.log('‚úÖ Redis connected'))
    .catch((error: Error) => console.error('‚ùå Redis connection error:', error));

// Prisma ÈîôËØØÂ§ÑÁêÜ
prisma.$connect()
    .then(() => console.log('‚úÖ Database connected'))
    .catch((error: Error) => console.error('‚ùå Database connection error:', error));

// ‰ºòÈõÖÂÖ≥Èó≠
const gracefulShutdown = async () => {
    try {
        await Promise.all([
            prisma.$disconnect(),
            redisClient.quit()
        ]);
        console.log('üëã Gracefully shutdown complete');
        process.exit(0);
    } catch (error: unknown) {
        console.error('‚ùå Error during graceful shutdown:', error instanceof Error ? error.message : 'Unknown error');
        process.exit(1);
    }
};

// ÁõëÂê¨ËøõÁ®ãÁªàÊ≠¢‰ø°Âè∑
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// Ê∑ªÂä†ÂÖ®Â±ÄÈîôËØØÂ§ÑÁêÜ
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    gracefulShutdown();
});

export {
    prisma,
    redisClient
};